import { AfterViewInit } from '@angular/core';
import { Component } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router'
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { FormMode } from '../shared/models/form.model';
import { ApplicationFormService } from '../shared/services/applicationForm.service';
import { CreateApplication, LoadApplication, UpdateApplication } from '../store/actions/application.actions';
import { applicationRecord } from '../store/selectors/application.selector';

@Component({
  selector: 'app-create-application',
  templateUrl: './create-application.component.html',
  styleUrls: ['./create-application.component.scss']
})
export class CreateApplicationComponent implements AfterViewInit {

    public mode$: Observable<FormMode>
    public formMode: FormMode

    public applicationForm: FormGroup;
    public statuses: Array<string> = ['New', 'Approved', 'Funded'];
    public id: string = null

    constructor(
        private formBuilder: FormBuilder,
        public store: Store<any>,
        public route: ActivatedRoute,
        public applicationFormService: ApplicationFormService
    ) {
        this.mode$ = route.url.pipe(map(url => {
            this.formMode = url[0].path.split('-')[0] as FormMode;
            if (this.formMode == 'edit') {
                this.id = url[url.length - 1].path;
            }
            return this.formMode
        }));

        this.applicationForm = this.formBuilder.group({
            firstName: [null],
            lastName: [null],
            phoneNumber: [null],
            email: [null],
            applicationNumber: [null],
            status: ['New'],
            amount: [null],
            monthlyPayAmount: [0],
            term: [null],
        });

        const monthlyPayAmountControl = this.applicationForm.controls['monthlyPayAmount'];
        const amountControl = this.applicationForm.controls['amount'];
        const termControl = this.applicationForm.controls['term'];

        amountControl.valueChanges.subscribe(change => {
            if (termControl.value) {
                monthlyPayAmountControl.setValue(this.calculateMonthlyPayment(amountControl.value, termControl.value))
            }
        });

        termControl.valueChanges.subscribe(change => {
            if (amountControl.value) {
                monthlyPayAmountControl.setValue(this.calculateMonthlyPayment(amountControl.value, termControl.value))
            }
        });
    }

    public calculateMonthlyPayment(amount, term): number {

        return parseFloat(amount) / parseInt(term)
    }

    public ngAfterViewInit(): void {
        //Better to have a GUID generated by the backend, Input should be display only
        this.applicationForm.controls['applicationNumber'].disable();

        //TODO: Should be Auto Populated: Set based on Amount and Term
        this.applicationForm.controls['monthlyPayAmount'].disable();

        if (this.store.select(applicationsList => applicationsList.length < 1)) {
            this.store.dispatch(new LoadApplication(this.id))
        }

        if (this.id) this.store.select(applicationRecord(this.id)).subscribe(data => {
            
            let formattedData = data ? this.applicationFormService.dataToForm(data) : {};
            this.applicationForm.patchValue({
                applicationNumber: this.id,
                ...formattedData
            })
        });
    }

    submitForm() {
        
        let formattedData = this.applicationFormService.mapFormToData(this.applicationForm.value);
        if (this.formMode == 'create') this.store.dispatch(new CreateApplication(formattedData))
        else {
            formattedData.applicationNumber = this.id;
            this.store.dispatch(new UpdateApplication(formattedData))
        }
    }

}
